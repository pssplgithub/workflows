name: .NET Desktop Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: EchoBot.sln                    # ðŸ‘ˆ Replace with your actual solution file
      Test_Project_Path: EchoBot/EchoBot.csproj


    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Restore dependencies
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }}

    - name: Run unit tests
      run: dotnet test $env:Test_Project_Path --configuration ${{ matrix.configuration }}

    # Skip signing if no certificate â€” comment this section if not signing
    # - name: Decode the signing certificate
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #     $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: Build app package
      run: |
        msbuild $env:Wap_Project_Path `
          /p:Configuration=${{ matrix.configuration }} `
          /p:AppxBundle=Always `
          /p:AppxBundlePlatforms="x86|x64" `
          /p:UapAppxPackageBuildMode=StoreUpload

    - name: Upload MSIX package
      uses: actions/upload-artifact@v4
      with:
        name: AppPackage-${{ matrix.configuration }}
        path: ${{ env.Wap_Project_Directory }}\AppPackages

    - name: Publish artifact (optional)
      run: dotnet publish MyApp/MyApp.csproj -c Release -o output



        
